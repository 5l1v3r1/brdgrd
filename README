brdgrd is short for ``bridge guard'': A program which is meant to protect Tor
bridges from being scanned (and as a result blocked) by the Great Firewall of
China [1,2].

The program runs in user space and makes use of libnetfilter_queue to get
packets passed from kernel to user space. Only TCP SYN and SYN/ACK segments
have to be passed to user space. Brdgrd is only interested in TCP handshakes
and not in established TCP connections. Once a TCP connection is established,
brdgrd does not interfere with it. Hence, the performance implications are
minimal.

Brdgrd basically intercepts the SYN and SYN/ACK exchanged by the bridge and the
client and analyzes and/or rewrites certain data:

- The TCP window size announced by the bridge bridge can be rewritten to a
  configurable value (which must be smaller than ~100). That way, the client
  will fragment the cipher list inside the TLS client hello. The GFC will not
  recognize the cipher list (it does not seem to conduct packet reassembly) and
  as a result will not scan the bridge. This technique appears to be very
  effective.
- The IP address 202.108.181.70 was found to be a special scanner. It appears
  in many scans and is statically blacklisted by brdgrd.
- Chinese scanners seem to have their TCP retransmissions set to 1. After the
  one and only retransmission failed, the scanners give up. So brdgrd can only
  accept SYNs if at least two retransmissions were observed. Recent versions of
  Windows and Linux both do this.
- Scanners mostly connect after multiples of 15 minutes. Within a small
  interval, brdgrd can act deaf and block all incoming connections.

If brdgrd assumes that a connecting host is a Chinese scanner, it tells the
kernel to drop the SYN segment. We can not tolerate false negatives since a
_single_ successful Chinese scan leads to the block of a bridge.

Brdgrd needs iptables rules to feed it with data. The following script passes
TCP SYNs and SYN/ACKs coming _only_ from Chinese IP addresses to brdgrd. That
way, brdgrd does _not_ interfere with any Tor connections originating from other
countries:

-----------------------------------------
#!/bin/bash
# set the port to your needs
TORPORT=443

# download latest APNIC data for Chinese networks
if [ ! -e delegated-apnic-latest ]; then
	wget http://ftp.apnic.net/stats/apnic/delegated-apnic-latest
fi
# parse data (the tool 'aggregate' is needed)
CN=`cat delegated-apnic-latest |
	awk -F\| '/^apnic\|CN\|ipv4\|/ { print $4"/" 32-log($5)/log(2) }' |
	aggregate -q -`
RETVAL=$?
[ $RETVAL -eq 0 ] && echo "Successfully parsed chinese network list."
[ $RETVAL -ne 0 ] && (echo "Failure in parsing chinese network list." ; exit)

# load iptables rules (this could take a while)
for NET in $CN; do
	iptables -A INPUT -p tcp --tcp-flags SYN SYN --dport $TORPORT -s $NET -j NFQUEUE --queue-num 1
	iptables -A OUTPUT -p tcp --tcp-flags SYN,ACK SYN,ACK --sport $TORPORT -d $NET -j NFQUEUE --queue-num 1
done
-----------------------------------------

Afterwards, you can compile brdgrd by typing ``make'' and start it by typing
``sudo ./brdgrd''. Keep in mind that the above iptables rules try to push SYNs
and SYN/ACKs to userspace. If brdgrd is not running, new Chinese connections
can not be handled by Tor since there is no userspace program
accepting/dropping the SYNs.

Please send patches, suggestions and comments to philipp.winter@kau.se
My GnuPG fingerprint is: 2A9F 5FBF 714D 42A9 F82C 0FEB 268C D15D 2D08 1E16.

[1] https://gist.github.com/da3c7a9af01d74cd7de7
[2] http://www.cs.kau.se/philwint/static/gfc/
